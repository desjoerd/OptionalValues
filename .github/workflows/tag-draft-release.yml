name: Tag and Create Draft Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  tag-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nerdbank GitVersioning needs the full history to calculate the version number
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          global-json-file: "global.json"
      - name: Restore tools
        run: dotnet tool restore

      - name: Get version from nbgv
        id: get_version
        run: echo "version=$(nbgv get-version -v SemVer2)" >> $GITHUB_OUTPUT

      # ✅ Only tag & push if build/tests succeeded
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Pack NuGet
        run: dotnet pack --configuration Release --no-build -o ./artifacts

      # Everything builds, now tag and draft the release
      - name: Tag git version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Determine previous tag by semantic version
        id: prev_tag
        run: |
          current_tag="v${{ steps.get_version.outputs.version }}"
          echo "Current tag: $current_tag"

          # Get all tags sorted by semver
          all_tags=$(git tag --sort=v:refname | grep '^v')
          echo "All tags (semver sorted):"
          echo "$all_tags"

          # Find the previous tag by walking the sorted list
          previous_tag=""
          for tag in $all_tags; do
            if [ "$tag" = "$current_tag" ]; then
              break
            fi
            previous_tag=$tag
          done

          echo "Previous tag: $previous_tag"
          echo "tag=$previous_tag" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          current_tag="v${{ steps.get_version.outputs.version }}"
          prev_tag="${{ steps.prev_tag.outputs.tag }}"
          echo "Generating release notes for range: ${prev_tag}..${current_tag}"

          RANGE_ARG=""
          if [ -n "$prev_tag" ]; then
            RANGE_ARG="${prev_tag}..${current_tag}"
          else
            RANGE_ARG="$current_tag"  # first tag ever, just include that commit
          fi

          echo "## 🚀 Release ${current_tag}" > notes.md
          echo "" >> notes.md

          # Grab all commits in the range
          all_commits=$(git log $RANGE_ARG --pretty=format:"%s")

          # Helper function for adding sections
          add_section() {
            local title=$1
            local pattern=$2
            local matches=$(echo "$all_commits" | grep -E "$pattern" || true)

            if [ -n "$matches" ]; then
              echo "### $title" >> notes.md
              echo "$matches" | sed 's/^/- /' >> notes.md
              echo "" >> notes.md
            fi
          }

          # Add categorized sections
          add_section "✨ Features & Improvements" "✨|⚡️|♻️"
          add_section "🐛 Bug Fixes" "🐛|🚑"
          add_section "⚠️ Breaking Changes" "💥|🔥"
          add_section "📝 Documentation" "📝"
          add_section "🛠 Maintenance" "🧰|🔧|♿"

          # Find commits that didn't match any of the above
          known_pattern="✨|⚡️|♻️|🐛|🚑|💥|🔥|📝|🧰|🔧|♿"
          other_commits=$(echo "$all_commits" | grep -Ev "$known_pattern" || true)

          if [ -n "$other_commits" ]; then
            echo "### 🔄 Other Changes" >> notes.md
            echo "$other_commits" | sed 's/^/- /' >> notes.md
            echo "" >> notes.md
          fi

          echo "Generated release notes:"
          cat notes.md

      - name: Create draft GitHub release with attached NuGet package
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body_path: notes.md
          files: |
            ./artifacts/*.nupkg
            ./artifacts/*.snupkg
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
